import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin: 'maven'



apply from: "conf.gradle"
apply from: "versions.gradle"

if (hasProperty('pub')) {
    System.err.print "Using configuration data from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${pub} found.")
    } else {
        apply from: pub
    }

} else {
    File confFile = new File("pub.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found\
.")
    } else {
        println "Using default configuration in 'pub.gradle'"
        apply from: "pub.gradle"
    }
}


group = "edu.holycross.shot"
version = "0.6.0"



repositories {
    mavenCentral()

    // for cite libs:
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/repositories/releases"
    }
    // for IBM Normalizer
    maven {
        url "https://oss.sonatype.org/content/repositories/releases"
    }
}

configurations {
    schemas {
        description = 'Manage schemas'
        transitive = true
    }
    publib
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: commonsioVersion

    compile ("log4j:log4j:${log4jVersion}") {
	exclude group: "com.sun.jdmk", module: "jmxtools"
        exclude group: "com.sun.jmx", module: "jmxri"
	exclude group: "javax.mail", module: "mail"
        exclude group: "javax.jms", module: "jms"
    }

    compile group: "org.codehaus.groovy", name : "groovy-all", version : groovyVersion
    compile group: 'edu.harvard.chs', name : 'cite' , version: citeVersion
    compile group: 'com.thaiopensource', name:'jing', version: '20091111'


    runtime group: 'edu.harvard.chs', name : 'cite' , version: citeVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitVersion
    testCompile group: 'com.ibm.icu', name: 'icu4j', version: icu4jVersion

    schemas group: 'edu.harvard.chs', name: 'cite', version: citeVersion, classifier: 'schemas', ext: 'zip'
}


httpPort = 8888
stopPort = 9451
stopKey = 'foo'

task copyInventory(type: Copy) {
  from "${inventoryDir}"
  into "${buildDir}/tmp/jettyRunWar/webapp/invs/"
  doFirst {
    println "Copying from ${inventoryDir} to  build location"
  }

}

task copyBuildPkg(type: Copy) {
    from "pkg"
    into "${buildDir}/sparqlcts-template"
    filter(ReplaceTokens, tokens: [sparqlctsVersion : version])
}

task copyWeb(type: Copy) {
    from "src/main/webapp"
    into "${buildDir}/sparqlcts-template/src/main/webapp"
}


task buildTemplate(type: Zip, dependsOn: [copyBuildPkg, copyWeb] ) {
    classifier = "template"
    from "${buildDir}/sparqlcts-template"
}



war {
    filter(ReplaceTokens, tokens: [tripleserver: tripleserver])
}

war { 
    from('invs') { 
        include '**/*.xml'
        into('invs') 
    } 
} 

jettyRunWar.dependsOn  copyInventory

uploadArchives {
  repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}


task cpTestSchemas (type: Copy) {
    configurations.schemas.filter { it.toString().endsWith(".zip") }.each{
        from zipTree(it)
    }
    into "testdata/schemas"
}

test.dependsOn cpTestSchemas

artifacts {
    publib jar
}


uploadPublib {
  repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}
